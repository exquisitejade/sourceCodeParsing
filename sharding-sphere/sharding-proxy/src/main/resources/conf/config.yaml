##################      ##################
# Here you can configure the rules for the proxy.
#
# We provide two kinds of configurations for example. This one is the configuration of Sharding rule,
# If you want to use Sharding, please refer to the this one, and if you only want to use master-slave,
# please refer to config_master_slave.yaml.
#
##################      ##################

# The example of Sharding rule.

#dataSources:
#  ds_0:
#    url: jdbc:mysql://127.0.0.1:3306/ds_0?serverTimezone=UTC&useSSL=false
#    username: root
#    password:
#    autoCommit: true
#    connectionTimeout: 30000
#    idleTimeout: 60000
#    maxLifetime: 1800000
#    maximumPoolSize: 65
#  ds_1:
#    url: jdbc:mysql://127.0.0.1:3306/ds_1?serverTimezone=UTC&useSSL=false
#    username: root
#    password:
#    autoCommit: true
#    connectionTimeout: 30000
#    idleTimeout: 60000
#    maxLifetime: 1800000
#    maximumPoolSize: 65
#
#shardingRule:
#  tables:
#    t_order:
#      actualDataNodes: ds_${0..1}.t_order_${0..1}
#      tableStrategy:
#        inline:
#          shardingColumn: order_id
#          algorithmExpression: t_order_${order_id % 2}
#      keyGeneratorColumnName: order_id
#    t_order_item:
#      actualDataNodes: ds_${0..1}.t_order_item_${0..1}
#      tableStrategy:
#        inline:
#          shardingColumn: order_id
#          algorithmExpression: t_order_item_${order_id % 2}
#  bindingTables:
#    - t_order,t_order_item
#  defaultDatabaseStrategy:
#    inline:
#      shardingColumn: user_id
#      algorithmExpression: ds_${user_id % 2}
#  defaultTableStrategy:
#    none:
#  defaultKeyGeneratorClassName: io.shardingsphere.core.keygen.DefaultKeyGenerator
#
#  props:
#    # MEMORY_STRICTLY: Proxy holds as many connections as the count of actual tables routed in a database.
#    #                  The benefit of this approach is saving memory for Proxy by Stream ResultSet.
#
#    # CONNECTION_STRICTLY: Proxy will release connections after get the overall rows from the ResultSet.
#    #                      Meanwhile, the cost of the memory will be increased.
#    connection.mode: CONNECTION_STRICTLY
#    max.connections.size.per.query: 4
#    acceptor.size: 16  # The default value is available processors count * 2.
#    executor.size: 16  # Infinite by default.
#    proxy.transaction.enabled: false
#    sql.show: false
#
#orchestration:
#  name: orchestration_ds
#  type: SHARDING
#  overwrite: true
#  zookeeper:
#    namespace: orchestration
#    serverLists: localhost:2181
#
#proxyAuthority:
#  username: root
#  password: root
